import React, { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { BookOpen, Image, Loader2, Wand2 } from 'lucide-react';

function App() {
  const [text, setText] = useState('');
  const [simplifiedText, setSimplifiedText] = useState('');
  const [image, setImage] = useState<File | null>(null);
  const [imageDescription, setImageDescription] = useState('');
  const [loading, setLoading] = useState(false);

  const { getRootProps, getInputProps } = useDropzone({
    accept: {
      'image/*': ['.png', '.jpg', '.jpeg', '.gif']
    },
    maxFiles: 1,
    onDrop: (acceptedFiles) => {
      setImage(acceptedFiles[0]);
    }
  });

  const simplifyText = (text: string) => {
    // Enhanced text simplification logic
    const complexWords: Record<string, string> = {
      'utilize': 'use',
      'commence': 'start',
      'terminate': 'end',
      'purchase': 'buy',
      'obtain': 'get',
      'require': 'need',
      'sufficient': 'enough',
      'demonstrate': 'show',
      'facilitate': 'help',
      'implement': 'do',
      'initiate': 'start',
      'subsequently': 'then',
      'nevertheless': 'but',
      'approximately': 'about',
      'numerous': 'many',
      'assist': 'help',
      'regarding': 'about',
      'additional': 'more',
      'adequate': 'enough',
      'component': 'part',
      'lead':'guide',
      'happy':'joyful',
      'refers': 'implies',
      'evalaute':'learn or understand'
    };

    let simplified = text.toLowerCase();
    
    // Replace complex words with simpler alternatives
    Object.entries(complexWords).forEach(([complex, simple]) => {
      const regex = new RegExp(\\b${complex}\\b, 'gi');
      simplified = simplified.replace(regex, simple);
    });

    // Break long sentences
    simplified = simplified.split(/[.!?]+/).map(sentence => {
      sentence = sentence.trim();
      if (sentence.length > 50) {
        // Add breaks for readability
        return sentence.replace(/,\s+/g, '.\n');
      }
      return sentence;
    }).join('. ');

    // Capitalize first letter of each sentence
    simplified = simplified.split('. ').map(sentence => {
      sentence = sentence.trim();
      if (sentence.length > 0) {
        return sentence.charAt(0).toUpperCase() + sentence.slice(1);
      }
      return sentence;
    }).join('. ');

    return simplified;
  };

  const handleSimplifyText = async () => {
    if (!text) return;
    setLoading(true);
    try {
      // Simulate processing delay
      await new Promise(resolve => setTimeout(resolve, 500));
      const simplified = simplifyText(text);
      setSimplifiedText(simplified);
    } catch (error) {
      console.error('Error simplifying text:', error);
      setSimplifiedText('Sorry, there was an error. Please try again.');
    }
    setLoading(false);
  };

  const analyzeImage = (file: File) => {
    // Basic image analysis logic
    const fileType = file.type.split('/')[1];
    const fileSize = (file.size / 1024 / 1024).toFixed(2);
    return This is a ${fileType} image that is ${fileSize}MB in size. It might contain text, objects, or people. For better accessibility, consider adding alt text that describes the main elements in the image.;
  };

  const handleAnalyzeImage = async () => {
    if (!image) return;
    setLoading(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 500));
      const description = analyzeImage(image);
      setImageDescription(description);
    } catch (error) {
      console.error('Error analyzing image:', error);
      setImageDescription('Sorry, there was an error analyzing the image. Please try again.');
    }
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white p-8">
      <div className="max-w-4xl mx-auto">
        <header className="text-center mb-12">
          <h1 className="text-4xl font-bold text-blue-900 mb-4">Learning Assistant</h1>
          <p className="text-lg text-gray-600">Simplify text and images for better understanding</p>
        </header>

        <div className="grid md:grid-cols-2 gap-8">
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex items-center gap-2 mb-4">
              <BookOpen className="text-blue-600" />
              <h2 className="text-xl font-semibold text-gray-800">Text Simplifier</h2>
            </div>
            <textarea
              className="w-full h-40 p-4 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter text to simplify... (Try using complex words like 'utilize', 'commence', 'facilitate')"
              value={text}
              onChange={(e) => setText(e.target.value)}
            />
            <button
              onClick={handleSimplifyText}
              disabled={!text || loading}
              className="mt-4 w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg flex items-center justify-center gap-2 disabled:opacity-50"
            >
              {loading ? <Loader2 className="animate-spin" /> : <Wand2 />}
              Simplify Text
            </button>
            {simplifiedText && (
              <div className="mt-4 p-4 bg-blue-50 rounded-lg">
                <h3 className="font-medium text-gray-800 mb-2">Simplified Version:</h3>
                <p className="text-gray-700 whitespace-pre-line">{simplifiedText}</p>
              </div>
            )}
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex items-center gap-2 mb-4">
              <Image className="text-blue-600" />
              <h2 className="text-xl font-semibold text-gray-800">Image Analyzer</h2>
            </div>
            <div
              {...getRootProps()}
              className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:border-blue-500 transition-colors"
            >
              <input {...getInputProps()} />
              {image ? (
                <img
                  src={URL.createObjectURL(image)}
                  alt="Preview"
                  className="max-h-40 mx-auto"
                />
              ) : (
                <p className="text-gray-500">Drag & drop an image here, or click to select</p>
              )}
            </div>
            <button
              onClick={handleAnalyzeImage}
              disabled={!image || loading}
              className="mt-4 w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg flex items-center justify-center gap-2 disabled:opacity-50"
            >
              {loading ? <Loader2 className="animate-spin" /> : <Wand2 />}
              Analyze Image
            </button>
            {imageDescription && (
              <div className="mt-4 p-4 bg-blue-50 rounded-lg">
                <h3 className="font-medium text-gray-800 mb-2">Simple Description:</h3>
                <p className="text-gray-700">{imageDescription}</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;